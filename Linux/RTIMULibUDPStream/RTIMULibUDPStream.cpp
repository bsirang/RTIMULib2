////////////////////////////////////////////////////////////////////////////
//
//  This file is part of RTIMULib
//
//  Copyright (c) 2014-2015, richards-tech, LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to
//  deal in the Software without restriction, including without limitation the
//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
//  sell copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
//  IN THE SOFTWARE.

#include "UDPIMUStream.h"

#include <iostream>
#include <string>

// Set to 1 to output raw data in CSV for offboard calibration
#define CALIBRATION_MODE 0

void print_usage(std::string name) {
  std::cout << name << ": <destination_host> <destination_port>" << std::endl;
}

int main(int argc, char *argv[]) {
  int sampleCount = 0;
  int sampleRate = 0;
  uint64_t rateTimer;
  uint64_t displayTimer;
  uint64_t now;

  if (argc < 3) {
    print_usage(std::string(argv[0]));
    return 1;
  }

  // const char *destination_host = argv[1];
  const std::string destination_host{argv[1]};
  char *end;
  long int destination_port = ::strtol(argv[2], &end, 10);

  if (argv[2] == end || destination_port < 0 || destination_port > 65535) {
    print_usage(std::string(argv[0]));
    return 1;
  }

  auto port16 = static_cast<uint16_t>(destination_port);
  UDPIMUStream udp_stream{destination_host, port16};

  printf("Streaming to %s:%d\n", destination_host.c_str(), port16);

  //  Using RTIMULib here allows it to use the .ini file generated by
  //  RTIMULibDemo. Or, you can create the .ini in some other directory by
  //  using:
  //      RTIMUSettings *settings = new RTIMUSettings("<directory path>",
  //      "RTIMULib");
  //  where <directory path> is the path to where the .ini file is to be
  //  loaded/saved

  RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

  RTIMU *imu = RTIMU::createIMU(settings);

  if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
    printf("No IMU found\n");
    exit(1);
  }

  //  This is an opportunity to manually override any settings before the call
  //  IMUInit

  //  set up IMU

  imu->IMUInit();

  //  this is a convenient place to change fusion parameters

  imu->setSlerpPower(0.02);
  imu->setGyroEnable(true);
  imu->setAccelEnable(true);
  imu->setCompassEnable(true);

  //  set up for rate timer

  rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

  //  now just process data
  while (1) {
    //  poll at the rate recommended by the IMU

    usleep(imu->IMUGetPollInterval() * 1000);

    while (imu->IMURead()) {
      RTIMU_DATA imuData = imu->getIMUData();

      auto orientation = imuData.fusionQPose;
      const RTVector3 xAxis(1.0, 0.0, 0.0);
      const RTVector3 zAxis(0.0, 0.0, 1.0);
      RTQuaternion rot1, rot2;
      rot1.fromAngleVector(M_PI, xAxis);
      rot2.fromAngleVector(M_PI / 2.0, zAxis);
      imuData.fusionQPose = rot2 * (rot1 * orientation);
      imuData.fusionQPose.toEuler(imuData.fusionPose);

      sampleCount++;

#if !CALIBRATION_MODE
      udp_stream.send(imuData);
#endif

      now = RTMath::currentUSecsSinceEpoch();
      //  display 10 times per second

      if ((now - displayTimer) > 100000) {

#if CALIBRATION_MODE
        const RTVector3 mag_rotated = imu->performTiltCompensation(imuData.compass_uncorrected);
        const RTVector3& mag_raw = imuData.compass_uncorrected;
        printf("%f,%f,%f,%f,%f,%f,%f,%f,%f\n", mag_raw.x(), mag_raw.y(), mag_raw.z(), mag_rotated.x(), mag_rotated.y(), mag_rotated.z(), imuData.accel.x(), imuData.accel.y(), imuData.accel.z());
#else
        printf("Sample rate %d: %s\r", sampleRate,
               RTMath::displayDegrees("", imuData.fusionPose));
#endif

#if 0
        printf("accel = %f %f %f gyro = %f %f %f mag = %f %f %f\n", imuData.accel.x(), imuData.accel.y(), imuData.accel.z(), imuData.gyro.x(), imuData.gyro.y(), imuData.gyro.z(), imuData.compass.x(), imuData.compass.y(), imuData.compass.z());
#endif
        fflush(stdout);
        displayTimer = now;
      }

      //  update rate every second

      if ((now - rateTimer) > 1000000) {
        sampleRate = sampleCount;
        sampleCount = 0;
        rateTimer = now;

        static int c = 0;
        if (c == 10) {
          settings->m_compassCalEllipsoidValid =
              !settings->m_compassCalEllipsoidValid;
          c = 0;
          // printf("value %d\n", settings->m_compassCalEllipsoidValid);
        }
        c++;
      }
    }
  }
  return 0;
}
